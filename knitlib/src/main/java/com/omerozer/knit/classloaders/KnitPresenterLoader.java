package com.omerozer.knit.classloaders;

import com.omerozer.knit.InternalModel;
import com.omerozer.knit.InternalPresenter;
import com.omerozer.knit.Knit;
import com.omerozer.knit.KnitInterface;
import com.omerozer.knit.KnitNavigator;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * Initializes {@link InternalPresenter}s generated by the KnitProcessor
 *
 * @author Omer Ozer
 */

public class KnitPresenterLoader {

    /**
     * Constructor cache to improve look-up times
     */
    private Map<Class<?>, Constructor<?>> cache;

    /**
     * Required Knit environment instance
     */
    private KnitInterface knitInstance;

    /**
     * Navigator instance. Gets passed onto Presenters.
     */
    private KnitNavigator navigator;

    /**
     * Internal model that all presenters holds an instance to.
     */
    private InternalModel modelManager;

    public KnitPresenterLoader(KnitInterface knit) {
        this.knitInstance = knit;
        this.navigator = knit.getNavigator();
        this.modelManager = knit.getModelManager();
        this.cache = new HashMap<>();
    }

    /**
     * Creates the {@link InternalModel} instance needed in the environment.
     * @param presenterClazz Class type of the associated {@link InternalPresenter} received from {@link com.omerozer.knit.ViewToPresenterMapInterface}.
     * @return returns an instance of {@link InternalPresenter} that has the environment {@link com.omerozer.knit.KnitNavigator.Navigator } and {@link com.omerozer.knit.components.ModelManager}.
     */
    public InternalPresenter loadPresenter(Class<?> presenterClazz) {
        try {
            return (InternalPresenter) findConstructorForPresenter(presenterClazz).newInstance(
                    knitInstance,navigator, modelManager);
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return null;
    }


    /**
     * Finds the constructor required by Knit to initialize the {@link InternalPresenter}. Caches the constructors for each model.
     * @param presenterClazz Class object of the {@link InternalPresenter} that is being loaded
     * @return the {@link Constructor found for the model}
     */
    private Constructor<?> findConstructorForPresenter(Class<?> presenterClazz) {
        if (cache.containsKey(presenterClazz)) {
            return cache.get(presenterClazz);
        }
        try {
            Constructor<?> constructor = presenterClazz.getConstructor(Knit.class,KnitNavigator.class, InternalModel.class);
            cache.put(presenterClazz, constructor);
            return constructor;
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
        return null;
    }

}
