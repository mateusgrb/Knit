package com.omerozer.knit.schedulers;

import java.util.concurrent.Callable;

/**
 * Base interface for all schedulers Knit provides.
 *
 * @see AndroidMainThreadScheduler
 * @see ImmediateScheduler
 * @see IOScheduler
 * @see com.omerozer.knit.schedulers.heavy.HeavyTaskScheduler
 * @author Omer Ozer
 */

public interface SchedulerInterface {



    /**
     * Accepts a {@link Callable} task into the Scheduler.
     * @param callable Callable task.
     * @param <T> Type of the result generated by {@link Callable}
     */
    <T>void  submit(Callable<T> callable);

    /**
     * Accepts a {@link Runnable} task into the Scheduler.
     * @param runnable {@link Runnable} task.
     */
    void submit(Runnable runnable);

    /**
     * Start the scheduler. After this, the scheduler should be ready to accept tasks.
     */
    void start();

    /**
     * Shut-down the scheculer.
     */
    void shutDown();

    /**
     * Sets the target {@link SchedulerInterface} which will run the consume task.
     * @param schedulerInterface Target scheduler to run the consume task.
     * @param consumer {@link Consumer} object that contains the way consume will occur.
     * @param <T> Type that the consumer will receive.
     */
    <T>void setTargetAndConsumer(SchedulerInterface schedulerInterface,Consumer consumer);

    /**
     * Returns whether the scheduler is done or not.
     * @return whether or not the task is done.
     */
    boolean isDone();
}
