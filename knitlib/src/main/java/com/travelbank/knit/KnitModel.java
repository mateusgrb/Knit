package com.travelbank.knit;

/**
 * Model classes that are exposed to the developer by Knit. These need to be annotated with {@link
 * Model} to be registered with Knit.
 * All {@link KnitModel}s will have a {@link InternalModel} counterpart that is actually used by
 * Knit framework to manage these.
 *
 * @author Omer Ozer
 */

public abstract class KnitModel implements ModelInterface {

    /**
     * Shared {@link com.travelbank.knit.components.ModelManager} instance.
     */
    InternalModel modelManager;

    /**
     * Setter for the {@link this#modelManager}.
     */
    public void setModelManager(InternalModel internalModel) {
        this.modelManager = internalModel;
    }

    /**
     * This method is used when requesting data from other models. Common use case for Umbrella
     * models that rely on other models.
     * Does not provide any Async support. It shouldn't matter however, the request method that is
     * making the call will have it's {@link com.travelbank.knit.schedulers.SchedulerInterface}s
     * set.
     *
     * @param data   the tag of the data that is requested.
     * @param params Extra params being passed to the model.
     * @param <T>    type of the response body of an {@link KnitResponse}.
     * @return {@link KnitResponse} generated by the model.
     */
    protected <T> KnitResponse<T> requestImmediately(String data, Object... params) {
        return (KnitResponse<T>) modelManager.requestImmediately(data, params);
    }

    /**
     * This method is used when inputting data to other models. Common use case for IO/Set operations
     * that don't require a response.
     * Does not provide any Async support. It shouldn't matter however, the request method that is
     * making the call will have it's {@link com.travelbank.knit.schedulers.SchedulerInterface}s
     * set.
     *
     * @param data   the tag of the data that is input.
     * @param params Extra params being passed to the model.
     * @return {@link KnitResponse} generated by the model.
     */
    protected void input(String data, Object... params) {
        modelManager.input(data, params);
    }

    /**
     * @see MemoryEntity
     */
    @Override
    public void onCreate() {

    }

    /**
     * @see MemoryEntity
     */
    @Override
    public void onLoad() {

    }

    /**
     * @see MemoryEntity
     */
    @Override
    public void onDestroy() {

    }

    /**
     * @see MemoryEntity
     */
    @Override
    public void onMemoryLow() {

    }

    /**
     * @see MemoryEntity
     */
    @Override
    public boolean shouldLoad() {
        return false;
    }
}
