package com.travelbank.knit.classloaders;

import com.travelbank.knit.InternalModel;
import com.travelbank.knit.KnitInterface;
import com.travelbank.knit.KnitModel;
import com.travelbank.knit.ModelMapInterface;
import com.travelbank.knit.schedulers.SchedulerProvider;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;



/**
 *
 * Initializes {@link InternalModel}s generated by the KnitProcessor
 *
 * @author Omer Ozer
 */
public class KnitModelLoader {


    /**
     * Constructor cache to improve look-up times
     */
    private Map<Class<?>, Constructor<?>> cache;

    /**
     * Required by models.
     */
    private SchedulerProvider schedulerProvider;

    /**
     * {@link KnitUtilsLoader} loads {@code ModelMap} into this. {@code ModelMap} extends {@link ModelMapInterface}
     */
    private ModelMapInterface modelMap;

    public KnitModelLoader(KnitInterface knit) {
        this.cache = new HashMap<>();
        this.schedulerProvider = knit.getSchedulerProvider();
        modelMap = knit.getModelMap();
    }

    /**
     * Creates the {@link InternalModel} instance needed in the environment.
     * @param modelClazz Class type of the associated {@link InternalModel} received from {@link ModelMapInterface}.
     * @return returns an instance of {@link InternalModel} that has the environment {@link SchedulerProvider}.
     */
    public InternalModel loadModel(Class<?> modelClazz) {
        try {
            return (InternalModel) findConstructorForModel(modelClazz).newInstance(schedulerProvider);
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Handles the conversion from {@link KnitModel} to {@link InternalModel} by extracting the associated {@code Class<? extends InternalModel>} from {@link ModelMapInterface}
     * @param clazz The {@code Class<? extends KnitModel>} class passed to search for it's internal counterpart.
     * @return The {@code Class<? extends InternalModel>} counter part of the passed {@code Class<? extends KnitModel>} class.
     */
    public Class<? extends InternalModel> getModelForModel(Class<? extends KnitModel> clazz){
        return modelMap.getModelClassForModel(clazz);
    }

    /**
     * Finds the constructor required by Knit to initialize the {@link InternalModel}. Caches the constructors for each model.
     * @param modelClazz Class object of the {@link InternalModel} that is being loaded
     * @return the {@link Constructor found for the model}
     */
    private Constructor<?> findConstructorForModel(Class<?> modelClazz) {

        if(cache.containsKey(modelClazz)){
            return cache.get(modelClazz);
        }

        try {
            Constructor<?> constructor = modelClazz.getConstructor(SchedulerProvider.class);
            cache.put(modelClazz,constructor);
            return constructor;
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
        return null;
    }

}
